//------------------------------------------------
//--- 010 Editor v2.0 Binary Template
//
//      File: GDF
//    Author: Johan Rensenbrink
//   Version: 1.0
//   Purpose: Parse GDF (Gun Data File) for Interstate 76.
//  Category: Data
// File Mask: *.gdf
//  ID Bytes: 42 57 44 32
//   History:  
//   1.0   Initial release.
//------------------------------------------------

#include "BWD2.bt"

struct GDFC
{
    SetBackColor(cLtYellow);
    TAG Tag;
    SetBackColor(cLtGreen);
    char Name[16];    
    SetBackColor(cLtRed);
    uint Unknown1;
    uint Unknown2;
    float Unknown3;
    float Unknown4;
    float Unknown5;
    float Unknown6;
    SetBackColor(cRed);
    char Unknown7[4];
    SetBackColor(cLtGreen);
    uint Damage;
    uint Health;
    float WeaponMass;
    SetBackColor(cLtRed);
    char Unknown8[12];
    ushort Unknown9;
    float Unknown10;
    SetBackColor(cLtGreen);
    float BurstRate;
    float FiringRate;
    uint FireAmount;
    float BulletVelocity;
    uint WeaponGroup;
    uint AmmoCount;
    SetBackColor(cLtRed);
    float Unknown11;
    SetBackColor(cLtGreen);
    char FireSpriteName[13];
    char SoundName[13];

    if (rev.Revision == 8)
    {
        SetBackColor(cLtRed);
        uint Unknown12;
        SetBackColor(cLtGreen);
        char EnabledSprite[13];
        char DisabledSprite[13];
    }
};

struct GPOF
{
    struct GPOF_LOD
    {        
        Vector3 Right;
        Vector3 Up;
        Vector3 Forward;
        Vector3 Position;
    };

    SetBackColor(cLtYellow);
    TAG Tag;
    SetBackColor(cLtGreen);
    GPOF_LOD Lod0;
    GPOF_LOD Lod1;
    GPOF_LOD Lod2;
    GPOF_LOD Lod3;
};

struct GGEO
{
    struct GGEO_PART
    {
        SetBackColor(cLtGreen);
        char PartName[8];
        Vector3 Right;
        Vector3 Up;
        Vector3 Forward;
        Vector3 Position;
        char Parent[8];
    
        SetBackColor(cLtRed);
        float Unknown1;
        float Unknown2;
        float Unknown3;
        float Unknown4;
        float Unknown5;
        float Unknown6;
        float Unknown7;
        uint Unknown8;
        uint Unknown9;
    };

    struct GGEO_LOD
    {
        GGEO_PART Part[4];
    };

    SetBackColor(cLtYellow);
    TAG Tag;
    SetBackColor(cLtGreen);
    uint PartCount;
    GGEO_LOD Lod0[PartCount];
    GGEO_LOD Lod1[PartCount];
    GGEO_LOD Lod2[PartCount];
};

struct ORDF
{
    SetBackColor(cLtYellow);
    TAG Tag;
    SetBackColor(cLtRed);
    uint Unknown1;
    float Unknown2;
    float Unknown3;
    uint Unknown4;
    char Unknown5[13];
    char Unknown6[13];
    char Unknown7[13];
    char Unknown8[13];
    char Unknown9[13];
    char SoundName1[13];
    char SoundName2[13];
    char Unknown10[13];
    char Unknown11[13];
};

struct OGEO
{
    struct OGEO_PART
    {
        SetBackColor(cLtGreen);
        char Name[8];
        Vector3 Right;
        Vector3 Up;
        Vector3 Forward;
        Vector3 Position;
        char Parent[8];
        SetBackColor(cLtRed);
        char Unknown2[36];
    };

    SetBackColor(cLtYellow);
    TAG Tag;
    SetBackColor(cLtGreen);
    uint ProjectileCount;
    OGEO_PART Projectiles[ProjectileCount];
};

// Read other tags
local char tag[4];
local uint size;
while(!FEof())
{
    // Read tag header
    ReadBytes(tag, FTell(), 4);
    
    switch(tag)
    {
        case "GDFC":
            GDFC gdfc;
            break;
        case "GPOF":
            GPOF gpof;
            break;
        case "GGEO":
            GGEO ggeo;
            break;
        case "ORDF":
            ORDF ordf;
            break;
        case "OGEO":
            OGEO ogeo;
        case "EXIT":
            EXIT exit;
            break;
        default:
            size = ReadUInt(FTell() + 4);
            Printf( "Encountered unknown chunk '%s' of size %d at position %Ld.\n", tag, size, FTell() );

            SetBackColor(cNone);
            UNKNOWN unknown;
            break;
    }
}